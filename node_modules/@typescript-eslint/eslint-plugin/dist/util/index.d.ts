import { ESLintUtils } from '@typescript-eslint/utils';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '.js';
export * from '@typescript-eslint/type-utils';
export declare const applyDefault: typeof ESLintUtils.applyDefault, deepMerge: typeof ESLintUtils.deepMerge, getParserServices: typeof ESLintUtils.getParserServices, isObjectNotArray: typeof ESLintUtils.isObjectNotArray, nullThrows: typeof ESLintUtils.nullThrows, NullThrowsReasons: {
    readonly MissingParent: "Expected node to have a parent.";
    readonly MissingToken: (token: string, thing: string) => string;
};
export type InferMessageIdsTypeFromRule<T> = ESLintUtils.InferMessageIdsTypeFromRule<T>;
export type InferOptionsTypeFromRule<T> = ESLintUtils.InferOptionsTypeFromRule<T>;
//# sourceMappingURL=index.d.ts.map
